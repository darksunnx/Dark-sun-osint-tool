import random
import string
import time
import sys
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn, TaskProgressColumn
from rich.layout import Layout
from rich.align import Align

class MainMenu:
    def __init__(self, search_engine, api_client):
        self.console = Console()
        self.search_engine = search_engine
        self.api_client = api_client

    def show_banner(self):
        banner = """
[bold red]
    ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ  ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà‚ñà ‚ñÑ‚ñà‚ñÄ     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà    ‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà 
    ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí ‚ñà‚ñà‚ñÑ‚ñà‚ñí    ‚ñí‚ñà‚ñà    ‚ñí  ‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà 
    ‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÑ‚ñë    ‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñì‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí
    ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà ‚ñà‚ñÑ      ‚ñí   ‚ñà‚ñà‚ñí‚ñì‚ñì‚ñà  ‚ñë‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí
    ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì  ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë
     ‚ñí‚ñí‚ñì  ‚ñí  ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñí ‚ñí‚ñí ‚ñì‚ñí   ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë‚ñë‚ñí‚ñì‚ñí ‚ñí ‚ñí ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí 
     ‚ñë ‚ñí  ‚ñí   ‚ñí   ‚ñí‚ñí ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë‚ñë ‚ñë‚ñí ‚ñí‚ñë   ‚ñë ‚ñë‚ñí  ‚ñë ‚ñë‚ñë‚ñë‚ñí‚ñë ‚ñë ‚ñë ‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë
     ‚ñë ‚ñë  ‚ñë   ‚ñë   ‚ñí     ‚ñë‚ñë   ‚ñë ‚ñë ‚ñë‚ñë ‚ñë    ‚ñë  ‚ñë  ‚ñë   ‚ñë‚ñë‚ñë ‚ñë ‚ñë    ‚ñë   ‚ñë ‚ñë 
       ‚ñë          ‚ñë  ‚ñë   ‚ñë     ‚ñë  ‚ñë              ‚ñë     ‚ñë              ‚ñë 
[/bold red]
[bold yellow][ Database Search & OSINT Tool code:@AL3XEY_PAN1CHKA base:@Revichs][/bold yellow]
"""
        layout = Layout()
        layout.split_column(
            Layout(Align.center(Panel(banner, border_style="red")))
        )
        self.console.print(layout)

    def get_user_input(self, prompt_text, choices=None):
        """–£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∏ –±–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        while True:
            try:
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º prompt —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                if choices:
                    self.console.print(Panel(
                        f"[cyan]{prompt_text}[/cyan]\n[dim]–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(choices)}[/dim]",
                        border_style="cyan"
                    ))
                else:
                    self.console.print(Panel(f"[cyan]{prompt_text}[/cyan]", border_style="cyan"))

                # –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ input() –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
                user_input = input().strip()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
                if not user_input:
                    self.console.print("[yellow]–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.[/yellow]")
                    continue

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–æ–¥
                if choices and user_input not in choices:
                    self.console.print(f"[yellow]–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {', '.join(choices)}[/yellow]")
                    continue

                return user_input

            except KeyboardInterrupt:
                self.console.print("\n[yellow]–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º[/yellow]")
                return None
            except Exception as e:
                self.console.print(f"[red]–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–≤–æ–¥–∞: {str(e)}[/red]")
                return None

    def show_hall_of_fame(self):
        heart_ascii = """
           <3   <3
         <3    <3    <3
        <3      <3      <3
        <3             <3
         <3           <3
           <3       <3
             <3   <3
               <3
        """

        developers = [
            "[bold red]–ê–ª–µ–∫—Å–µ–π[/bold red] [cyan]–ø–∞–Ω–∏—á–∫–∞-–∫–æ–¥–µ—Ä[/cyan]",
            "[bold blue]@Revichs[/bold blue] [cyan]–¥–∞—Ç–∞–±–∞–∑–∞ –∏ –ø–æ–º–æ—â—å[/cyan]"
        ]

        developers_panel = Panel(
            "\n".join([
                Align.center(heart_ascii),
                "\n[bold yellow]–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏:[/bold yellow]\n",
                "\n".join(f"‚Ä¢ {dev}" for dev in developers)
            ]),
            title="[bold red]‚ô• –ó–∞–ª –°–ª–∞–≤—ã ‚ô•[/bold red]",
            border_style="red"
        )

        self.console.print("\n")
        self.console.print(developers_panel)
        self.console.print("\n[dim]–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...[/dim]")
        input()

    def show(self):
        while True:
            self.show_banner()
            menu_items = [
                "[1] üì± [bold cyan]Search by Phone Number[/bold cyan] (—Ñ–æ—Ä–º–∞—Ç: 79991234567)",
                "[2] üí¨ [bold cyan]Search by Telegram Username[/bold cyan] (—Ñ–æ—Ä–º–∞—Ç: @username)",
                "[3] üìÑ [bold cyan]Search by Passport[/bold cyan] (—Ñ–æ—Ä–º–∞—Ç: 1234 567890)",
                "[4] üî¢ [bold cyan]Search by SNILS[/bold cyan] (—Ñ–æ—Ä–º–∞—Ç: 12345678901)",
                "[5] üîë [bold cyan]Password Generator[/bold cyan]",
                "[6] üåê [bold cyan]Search via LeakOSINT API[/bold cyan]",
                "[7] ‚≠ê [bold cyan]Hall of Fame[/bold cyan]",
                "[8] üö™ [bold red]Exit[/bold red]"
            ]

            menu_table = Table(show_header=False, border_style="red", width=80)
            menu_table.add_column("Option", style="bold white", justify="left")

            for item in menu_items:
                menu_table.add_row(item)

            self.console.print(Panel(
                Align.center(menu_table),
                title="[bold red]Menu Options[/bold red]",
                border_style="red"
            ))

            choice = self.get_user_input("\n[bold]–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é[/bold]", ["1", "2", "3", "4", "5", "6", "7", "8"])
            if not choice:
                self.console.print(Panel("[yellow]–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã[/yellow]", border_style="yellow"))
                break

            if choice == "1":
                self.search_by_phone()
            elif choice == "2":
                self.search_by_telegram()
            elif choice == "3":
                self.search_by_passport()
            elif choice == "4":
                self.search_by_snils()
            elif choice == "5":
                self.generate_password()
            elif choice == "6":
                self.search_via_api()
            elif choice == "7":
                self.show_hall_of_fame()
            elif choice == "8":
                self.console.print(Panel("[yellow]–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞[/yellow]", border_style="yellow"))
                break

    def perform_search(self, search_function, query, search_type):
        with Progress(
            "[progress.description]{task.description}",
            SpinnerColumn(),
            BarColumn(complete_style="red", finished_style="green"),
            TaskProgressColumn(),
            TimeElapsedColumn(),
            console=self.console,
        ) as progress:
            task = progress.add_task(
                f"[bold red]üîç –ü–æ–∏—Å–∫ {search_type}...[/bold red]",
                total=100
            )

            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞ —Å –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
            for i in range(100):
                time.sleep(0.02)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
                progress.update(task, advance=1)

            results = search_function(query)
            return results

    def display_results(self, results):
        if not results:
            self.console.print(Panel(
                "[yellow]üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã[/yellow]",
                title="[bold red]–ü–æ–∏—Å–∫[/bold red]",
                border_style="red"
            ))
            return

        table = Table(
            show_header=True,
            header_style="bold red",
            border_style="red",
            title="[bold red]–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞[/bold red]"
        )
        table.add_column("üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫", style="cyan", justify="left")
        table.add_column("üìù –î–∞–Ω–Ω—ã–µ", style="green", justify="left")

        for result in results:
            table.add_row(result["source"], result["data"])

        self.console.print(Panel(table, border_style="red"))

    def search_by_phone(self):
        self.console.print("\n[bold cyan]–ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞[/bold cyan]")
        self.console.print("[dim]–§–æ—Ä–º–∞—Ç: 79991234567 (11 —Ü–∏—Ñ—Ä, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤)[/dim]")
        query = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        if query:
            results = self.perform_search(
                lambda q: self.search_engine.search_files(q, "phone"),
                query,
                "—Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            )
            self.display_results(results)

    def search_by_telegram(self):
        self.console.print("\n[bold cyan]–ü–æ–∏—Å–∫ –ø–æ Telegram[/bold cyan]")
        self.console.print("[dim]–§–æ—Ä–º–∞—Ç: @username –∏–ª–∏ username (–±–µ–∑ @)[/dim]")
        query = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ username")
        if query:
            if not query.startswith("@"):
                query = "@" + query
            results = self.perform_search(
                lambda q: self.search_engine.search_files(q, "telegram"),
                query,
                "Telegram username"
            )
            self.display_results(results)

    def search_by_passport(self):
        self.console.print("\n[bold cyan]–ü–æ–∏—Å–∫ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É[/bold cyan]")
        self.console.print("[dim]–§–æ—Ä–º–∞—Ç: 1234 567890 (—Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä, –º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–æ–º –∏–ª–∏ –±–µ–∑)[/dim]")
        query = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
        if query:
            results = self.perform_search(
                lambda q: self.search_engine.search_files(q, "passport"),
                query,
                "–ø–∞—Å–ø–æ—Ä—Ç–∞"
            )
            self.display_results(results)

    def search_by_snils(self):
        self.console.print("\n[bold cyan]–ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–°[/bold cyan]")
        self.console.print("[dim]–§–æ—Ä–º–∞—Ç: 12345678901 (11 —Ü–∏—Ñ—Ä –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç–∏—Ä–µ)[/dim]")
        query = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –°–ù–ò–õ–°")
        if query:
            results = self.perform_search(
                lambda q: self.search_engine.search_files(q, "snils"),
                query,
                "–°–ù–ò–õ–°"
            )
            self.display_results(results)

    def generate_password(self):
        self.console.print("\n[bold cyan]–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π[/bold cyan]")
        length_input = self.get_user_input("[dim]–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12)[/dim]")
        length = 12
        try:
            if length_input:
                length = int(length_input)
        except ValueError:
            self.console.print("[yellow]–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 12[/yellow]")

        chars = string.ascii_letters + string.digits + string.punctuation
        password = ''.join(random.choice(chars) for _ in range(length))
        self.console.print(Panel(f"[green]{password}[/green]", title="[bold cyan]–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å[/bold cyan]", border_style="cyan"))

    def search_via_api(self):
        if not self.api_client.api_key:
            self.console.print(Panel("[red]API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω![/red]", title="[bold red]–û—à–∏–±–∫–∞[/bold red]", border_style="red"))
            return

        self.console.print("\n[bold cyan]–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ LeakOSINT API[/bold cyan]")
        query_type = self.get_user_input(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞",
            choices=["email", "phone", "username"]
        )
        if not query_type:
            return

        examples = {
            "email": "example@mail.com",
            "phone": "79991234567",
            "username": "@username"
        }

        self.console.print(f"[dim]–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞: {examples[query_type]}[/dim]")
        query = self.get_user_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
        if not query:
            return

        try:
            results = self.perform_search(
                lambda q: self.api_client.search(query_type, q),
                query,
                f"—á–µ—Ä–µ–∑ API ({query_type})"
            )
            self.display_results([{"source": "LeakOSINT API", "data": str(result)} for result in results])
        except Exception as e:
            self.console.print(Panel(f"[red]–û—à–∏–±–∫–∞ API: {str(e)}[/red]", title="[bold red]–û—à–∏–±–∫–∞[/bold red]", border_style="red"))